name: Build F* and test related projects
on:
  push:
  workflow_dispatch:

# TODO:
# Is there a way to set the default container? this is stupid
# Move to the regular fstar-ci-base too

defaults:
  run:
    # Setting the default shell to bash. This is not only more standard,
    # but also makes sure that we run with -o pipefail, so we can safely
    # pipe data (such as | tee LOG) without missing out on failures
    # and getting false positives. If you want to change the default shell,
    # keep in mind you need a way to handle this.
    shell: bash

jobs:
  fstar-build:
    # runs-on: ubuntu-latest
    runs-on: [linux, X64]
    container: mtzguido/fstar-base-testing
    steps:
      - name: Cleanup
        run: find . -delete
      - run: echo "HOME=/home/opam" >> $GITHUB_ENV

      - uses: actions/checkout@master
        with:
          path: FStar/

      - name: Prep
        run: |
          # In case we edited fstar.opam, install new deps here
          # This will most likely fail to like krml below, what's going on?
          # eval $(opam env)
          # opam install --confirm-level=unsafe-yes --deps-only ./FStar/fstar.opam

      - name: Build
        run: |
          eval $(opam env)
          # make -C FStar -skj$(nproc) ADMIT=1

      - uses: mtzguido/gci-upload@master
        with:
          name: FStar
          exclude:
            - .git

  fstar-test:
    runs-on: ubuntu-latest
    container: mtzguido/fstar-base-testing
    needs: fstar-build
    steps:
      - name: Cleanup
        run: find . -delete
      - run: echo "HOME=/home/opam" >> $GITHUB_ENV

      - uses: mtzguido/gci-download@master
        with:
          name: FStar
          hometag: FSTAR

      - name: Test
        run: |
          eval $(opam env)
          make -C FStar -skj$(nproc) ci-uregressions

  # fstar-test-boot:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   # needs: fstar-build
  #   # ^ This does not really depend on the previous job, but this can be
  #   # enabled if we wanted to sequentialize them for whatever reason.
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - uses: actions/checkout@master
  #       with:
  #         path: FStar/

  #     - name: Bootstrap
  #       run: |
  #         eval $(opam env)
  #         make -C FStar -skj$(nproc) 1
  #         make -C FStar -skj$(nproc) full-bootstrap ADMIT=1

  #     - name: Check diff
  #       run: |
  #         cd FStar/
  #         echo "git status:"
  #         git status
  #         FAILED=false
  #         if ! git diff --exit-code ocaml/; then
  #           echo "::group::DIFF"
  #           git diff
  #           echo "::endgroup::"
  #           FAILED=true
  #         fi
  #         if git ls-files --others --exclude-standard -- ocaml/ | grep -q; then
  #           echo "::group::EXTRA FILES"
  #           git diff
  #           echo "::endgroup::"
  #           FAILED=true
  #         fi
  #         if $FAILED; then false; fi

  # krml-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs: fstar-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Clone karamel
  #       uses: actions/checkout@master
  #       with:
  #         path: karamel/
  #         repository: FStarLang/karamel

  #     - name: Prep
  #       run: |
  #         eval $(opam env)
  #         # Fails mysteriously:
  #         #
  #         # Error:  Package conflict!
  #         #   * No agreement on the version of ocaml:
  #         #     - (invariant) -> ocaml-base-compiler = 4.14.2 -> ocaml = 4.14.2
  #         # No solution found, exiting
  #         #     - karamel -> fstar -> ocaml < 4.06.0
  #         #     You can temporarily relax the switch invariant with `--update-invariant'
  #         #   * No agreement on the version of ocaml-base-compiler:
  #         #     - (invariant) -> ocaml-base-compiler = 4.14.2
  #         #     - karamel -> fstar -> ocaml < 4.06.0 -> ocaml-base-compiler = 3.07+1
  #         #   * Missing dependency:
  #         #     - karamel -> fstar -> z3 = 4.8.5 -> conf-python-2-7
  #         #     depends on the unavailable system package 'python2.7'. Use `--no-depexts' to attempt installation anyway, or it is possible that a depext package name in the opam file is incorrect.
  #         #   * Missing dependency:
  #         #     - karamel -> fstar -> ocaml < 4.06.0 -> ocaml-variants >= 3.11.1 -> ocaml-beta
  #         #     unmet availability conditions: 'enable-ocaml-beta-repository'
  #         #   * Missing dependency:
  #         #     - karamel -> fstar -> ocaml < 4.06.0 -> ocaml-variants >= 3.11.1 -> system-msvc
  #         #     unmet availability conditions: 'os = "win32"'
  #         #
  #         # opam install --confirm-level=unsafe-yes --deps-only ./karamel/karamel.opam

  #     - name: Build krml
  #       run: |
  #         eval $(opam env)
  #         make -C karamel -skj$(nproc)

  #     # krml is a symlink to _build/default/src/Karamel.exe, which we are not including
  #     # This will overwrite the link with the actual file.
  #     - name: Fix for symlink
  #       run: |
  #         cp --remove-destination $(realpath karamel/krml) karamel/krml

  #     - name: Tar for artifact
  #       run: tar -czf karamel.tar.gz --exclude=karamel/.git --exclude=karamel/_build karamel

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: karamel.tar.gz
  #         name: karamel
  #         retention-days: 1 # revisit

  # krml-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C karamel -skj$(nproc) test

  # steel-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Clone steel
  #       uses: actions/checkout@master
  #       with:
  #         path: steel/
  #         repository: FStarLang/steel

  #     - name: Build
  #       run: |
  #         eval $(opam env)
  #         make -C steel -skj$(nproc)

  #     - name: Tar for artifact
  #       run: tar -czf steel.tar.gz --exclude=steel/.git steel

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: steel.tar.gz
  #         name: steel
  #         retention-days: 1 # revisit

  # steel-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - steel-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get steel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: steel
  #     - name: Untar
  #       run: tar xzf steel.tar.gz
  #     - run: echo "STEEL_HOME=$(pwd)/steel" >> $GITHUB_ENV

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C steel -skj$(nproc) test

  # pulse-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Clone pulse
  #       uses: actions/checkout@master
  #       with:
  #         path: pulse/
  #         repository: FStarLang/pulse

  #     - name: Build
  #       run: |
  #         eval $(opam env)
  #         make -C pulse -skj$(nproc)

  #     - name: Tar for artifact
  #       run: tar -czf pulse.tar.gz --exclude=pulse/.git pulse

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: pulse.tar.gz
  #         name: pulse
  #         retention-days: 1 # revisit

  # pulse-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - pulse-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get pulse
  #       uses: actions/download-artifact@master
  #       with:
  #         name: pulse
  #     - name: Untar
  #       run: tar xzf pulse.tar.gz
  #     - run: echo "PULSE_HOME=$(pwd)/pulse" >> $GITHUB_ENV

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C pulse -skj$(nproc) test

  # hacl-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Clone hacl-star
  #       uses: actions/checkout@master
  #       with:
  #         path: hacl-star/
  #         repository: hacl-star/hacl-star

  #     - run: echo "HACL_HOME=$(pwd)/hacl-star" >> $GITHUB_ENV

  #     - name: Get Vale
  #       run: ./hacl-star/tools/get_vale.sh

  #     - name: Build
  #       run: |
  #         eval $(opam env)
  #         NPROC=$(nproc)
  #         if [ $NPROC -gt 16 ]; then NPROC=16; fi
  #         make -C hacl-star -skj${NPROC} OTHERFLAGS='--admit_smt_queries true'

  #     - name: Tar for artifact
  #       run: tar -czf hacl-star.tar.gz --exclude=hacl-star/.git hacl-star

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: hacl-star.tar.gz
  #         name: hacl-star
  #         retention-days: 1 # revisit

  # hacl-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - hacl-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get hacl-star
  #       uses: actions/download-artifact@master
  #       with:
  #         name: hacl-star
  #     - name: Untar
  #       run: tar xzf hacl-star.tar.gz
  #     - run: echo "HACL_HOME=$(pwd)/hacl-star" >> $GITHUB_ENV

  #     - name: Get Vale (again)
  #       run: ./hacl-star/tools/get_vale.sh

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C hacl-star -skj$(nproc) test

  # everparse-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Clone everparse
  #       uses: actions/checkout@master
  #       with:
  #         path: everparse/
  #         repository: project-everest/everparse

  #     - run: echo "EVERPARSE_HOME=$(pwd)/everparse" >> $GITHUB_ENV

  #     - name: Build
  #       run: |
  #         eval $(opam env)
  #         NPROC=$(nproc)
  #         if [ $NPROC -gt 16 ]; then NPROC=16; fi
  #         make -C everparse -skj${NPROC} OTHERFLAGS='--admit_smt_queries true'

  #     - name: Tar for artifact
  #       run: tar -czf everparse.tar.gz --exclude=everparse/.git everparse

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: everparse.tar.gz
  #         name: everparse
  #         retention-days: 1 # revisit

  # everparse-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - everparse-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get everparse
  #       uses: actions/download-artifact@master
  #       with:
  #         name: everparse
  #     - name: Untar
  #       run: tar xzf everparse.tar.gz
  #     - run: echo "EVERPARSE_HOME=$(pwd)/everparse" >> $GITHUB_ENV

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C everparse -skj$(nproc) test

  # merkle-tree-build:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - hacl-build
  #     - everparse-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get everparse
  #       uses: actions/download-artifact@master
  #       with:
  #         name: everparse
  #     - name: Untar
  #       run: tar xzf everparse.tar.gz
  #     - run: echo "EVERPARSE_HOME=$(pwd)/everparse" >> $GITHUB_ENV

  #     - name: Get hacl-star
  #       uses: actions/download-artifact@master
  #       with:
  #         name: hacl-star
  #     - name: Untar
  #       run: tar xzf hacl-star.tar.gz
  #     - run: echo "HACL_HOME=$(pwd)/hacl-star" >> $GITHUB_ENV

  #     - name: Clone merkle-tree
  #       uses: actions/checkout@master
  #       with:
  #         path: merkle-tree/
  #         repository: hacl-star/merkle-tree

  #     - name: Build
  #       run: |
  #         eval $(opam env)
  #         NPROC=$(nproc)
  #         if [ $NPROC -gt 16 ]; then NPROC=16; fi
  #         make -C merkle-tree -skj${NPROC} dist/libmerkletree.a

  #     - name: Tar for artifact
  #       run: tar -czf merkle-tree.tar.gz --exclude=merkle-tree/.git merkle-tree

  #     - name: Save artifact
  #       uses: actions/upload-artifact@master
  #       with:
  #         path: merkle-tree.tar.gz
  #         name: merkle-tree
  #         retention-days: 1 # revisit

  # merkle-tree-test:
  #   runs-on: ubuntu-latest
  #   container: mtzguido/fstar-base-testing
  #   needs:
  #     - fstar-build
  #     - krml-build
  #     - hacl-build
  #     - everparse-build
  #     - merkle-tree-build
  #   steps:
  #     - name: Cleanup
  #       run: find . -delete
  #     - run: echo "HOME=/home/opam" >> $GITHUB_ENV

  #     - name: Get FStar
  #       uses: actions/download-artifact@master
  #       with:
  #         name: FStar
  #     - name: Untar
  #       run: tar xzf FStar.tar.gz
  #     - run: echo "FSTAR_HOME=$(pwd)/FStar" >> $GITHUB_ENV

  #     - name: Get karamel
  #       uses: actions/download-artifact@master
  #       with:
  #         name: karamel
  #     - name: Untar
  #       run: tar xzf karamel.tar.gz
  #     - run: echo "KRML_HOME=$(pwd)/karamel" >> $GITHUB_ENV

  #     - name: Get everparse
  #       uses: actions/download-artifact@master
  #       with:
  #         name: everparse
  #     - name: Untar
  #       run: tar xzf everparse.tar.gz
  #     - run: echo "EVERPARSE_HOME=$(pwd)/everparse" >> $GITHUB_ENV

  #     - name: Get hacl-star
  #       uses: actions/download-artifact@master
  #       with:
  #         name: hacl-star
  #     - name: Untar
  #       run: tar xzf hacl-star.tar.gz
  #     - run: echo "HACL_HOME=$(pwd)/hacl-star" >> $GITHUB_ENV

  #     - name: Get merkle-tree
  #       uses: actions/download-artifact@master
  #       with:
  #         name: merkle-tree
  #     - name: Untar
  #       run: tar xzf merkle-tree.tar.gz
  #     - run: echo "EVERPARSE_HOME=$(pwd)/merkle-tree" >> $GITHUB_ENV

  #     - name: Test
  #       run: |
  #         eval $(opam env)
  #         make -C merkle-tree -skj$(nproc) test
