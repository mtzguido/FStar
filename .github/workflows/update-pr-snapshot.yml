name: Update generated files in a PR
on:
  issue_comment:
    types: [created]

jobs:
  pr_comment:
    name: Run PR comment hook
    # Only on PRs, not issues
    # only if @ginbro is mentioned
    if: |
      github.event.issue.pull_request
      && contains(github.event.comment.body, '@ginbro')

    runs-on: [self-hosted, linux, X64, devenv]

    defaults:
      run:
        # Setting the default shell to bash. This is not only more standard,
        # but also makes sure that we run with -o pipefail, so we can safely
        # pipe data (such as | tee LOG) without missing out on failures
        # and getting false positives. If you want to change the default shell,
        # keep in mind you need a way to handle this.
        shell: bash

    steps:
      - name: Startup react
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: |
            rocket

      - name: Dump github context
        run: |
          echo "${{ toJSON (github) }}"

      - name: Check out repo (on main branch)
        uses: actions/checkout@v3

      - name: Move to PR
        run: |
          gh pr checkout 5
        env:
          GH_TOKEN: ${{github.token}}

      - name: Setup
        run: |
          LOG=$(mktemp)
          git config user.name "ginbro"
          git config user.email "ginbro@github.com"
          echo "Running on commit $(git show -s)" >> $LOG
          echo "LOG=$LOG" >> $GITHUB_ENV

      - name: Regenerate snapshot
        if: ${{ contains(github.event.comment.body, '!!snapshot') }}
        run: |
          echo 'GINBRO: regenerating snapshot' >> $LOG

          make full-bootstrap -j$(nproc)

          echo "STATUS:" |& tee -a $LOG
          git status |& tee -a $LOG
          git add ocaml/fstar*/generated

          if git commit -m 'automated snapshot'; then
            echo 'SHOULD_PUSH=1' >> $GITHUB_ENV
          else
            echo "Nothing to commit"
          fi

      - name: Regenerate expected output
        if: ${{ contains(github.event.comment.body, '!!output') }}
        run: |
          echo 'GINBRO: regenerating expected output' >> $LOG

          make -j$(nproc)
          make output -j$(nproc)

          echo "STATUS:" |& tee -a $LOG
          git status |& tee -a $LOG
          git add tests/error-messages
          git add tests/ide/emacs
          git add tests/bug-reports

          if git commit -m 'automated output regen'; then
            echo 'SHOULD_PUSH=1' >> $GITHUB_ENV
          else
            echo "Nothing to commit"
          fi

      - name: Push results
        if: ${{ env.SHOULD_PUSH == '1' }}
        run: |
          # FIXME: this variable clearly does not exist
          # for this kind of event. Nor is it clear that we have
          # write access to the source repo, or even its url!
          # Find a way to get it.
          git push origin HEAD:$GITHUB_REF_NAME

      - name: Notify of no changes
        if: ${{ env.SHOULD_PUSH != '1' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            No changes to commit.

      - name: Print full log (if debug)
        uses: peter-evans/create-or-update-comment@v3
        if: ${{ always() && contains(github.event.comment.body, '!!debug') }}
        with:
          issue-number: ${{ github.event.issue.number }}
          body-path: ${{ env.LOG }}

      - name: Failure comment
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Something failed when running the workflow, please check the logs.
